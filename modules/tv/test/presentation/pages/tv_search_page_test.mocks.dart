// Mocks generated by Mockito 5.0.16 from annotations
// in tv/test/presentation/pages/tv_search_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:flutter_bloc/flutter_bloc.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tv/domain/usecases/search_tvs.dart' as _i2;
import 'package:tv/presentation/cubit/search/tv_search_cubit.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSearchTvs_0 extends _i1.Fake implements _i2.SearchTvs {}

class _FakeTvSearchState_1 extends _i1.Fake implements _i3.TvSearchState {}

/// A class which mocks [TvSearchCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSearchCubit extends _i1.Mock implements _i3.TvSearchCubit {
  MockTvSearchCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SearchTvs get searchTvs =>
      (super.noSuchMethod(Invocation.getter(#searchTvs),
          returnValue: _FakeSearchTvs_0()) as _i2.SearchTvs);
  @override
  _i3.TvSearchState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeTvSearchState_1()) as _i3.TvSearchState);
  @override
  _i4.Stream<_i3.TvSearchState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.TvSearchState>.empty())
          as _i4.Stream<_i3.TvSearchState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i4.Future<void> fetchTvSearch(String? query) =>
      (super.noSuchMethod(Invocation.method(#fetchTvSearch, [query]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void emit(_i3.TvSearchState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i5.Change<_i3.TvSearchState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  String toString() => super.toString();
}
