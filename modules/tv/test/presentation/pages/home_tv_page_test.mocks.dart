// Mocks generated by Mockito 5.0.16 from annotations
// in tv/test/presentation/pages/home_tv_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tv/domain/usecases/get_now_playing_tvs.dart' as _i2;
import 'package:tv/domain/usecases/get_popular_tvs.dart' as _i3;
import 'package:tv/domain/usecases/get_top_rated_tvs.dart' as _i4;
import 'package:tv/presentation/cubit/list/tv_list_cubit.dart' as _i5;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetNowPlayingTvs_0 extends _i1.Fake implements _i2.GetNowPlayingTvs {
}

class _FakeGetPopularTvs_1 extends _i1.Fake implements _i3.GetPopularTvs {}

class _FakeGetTopRatedTvs_2 extends _i1.Fake implements _i4.GetTopRatedTvs {}

class _FakeTvListState_3 extends _i1.Fake implements _i5.TvListState {}

/// A class which mocks [TvListCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvListCubit extends _i1.Mock implements _i5.TvListCubit {
  MockTvListCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetNowPlayingTvs get getNowPlayingTvs =>
      (super.noSuchMethod(Invocation.getter(#getNowPlayingTvs),
          returnValue: _FakeGetNowPlayingTvs_0()) as _i2.GetNowPlayingTvs);
  @override
  _i3.GetPopularTvs get getPopularTvs =>
      (super.noSuchMethod(Invocation.getter(#getPopularTvs),
          returnValue: _FakeGetPopularTvs_1()) as _i3.GetPopularTvs);
  @override
  _i4.GetTopRatedTvs get getTopRatedTvs =>
      (super.noSuchMethod(Invocation.getter(#getTopRatedTvs),
          returnValue: _FakeGetTopRatedTvs_2()) as _i4.GetTopRatedTvs);
  @override
  _i5.TvListState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeTvListState_3()) as _i5.TvListState);
  @override
  _i6.Stream<_i5.TvListState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i5.TvListState>.empty())
          as _i6.Stream<_i5.TvListState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void fetchNowPlayingTvs() =>
      super.noSuchMethod(Invocation.method(#fetchNowPlayingTvs, []),
          returnValueForMissingStub: null);
  @override
  void fetchPopularTvs() =>
      super.noSuchMethod(Invocation.method(#fetchPopularTvs, []),
          returnValueForMissingStub: null);
  @override
  void fetchTopRatedTvs() =>
      super.noSuchMethod(Invocation.method(#fetchTopRatedTvs, []),
          returnValueForMissingStub: null);
  @override
  void emit(_i5.TvListState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i7.Change<_i5.TvListState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  String toString() => super.toString();
}
