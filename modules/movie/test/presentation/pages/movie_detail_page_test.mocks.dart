// Mocks generated by Mockito 5.0.16 from annotations
// in movie/test/presentation/pages/movie/movie_detail_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie/domain/entities/movie_detail.dart' as _i9;
import 'package:movie/domain/usecases/get_movie_detail.dart' as _i2;
import 'package:movie/domain/usecases/get_movie_recommendations.dart' as _i3;
import 'package:movie/domain/usecases/watchlist/get_movie_watchlist_status.dart'
    as _i4;
import 'package:movie/domain/usecases/watchlist/remove_movie_watchlist.dart'
    as _i6;
import 'package:movie/domain/usecases/watchlist/save_movie_watchlist.dart'
    as _i5;
import 'package:movie/presentation/cubit/detail/movie_detail_cubit.dart' as _i7;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetMovieDetail_0 extends _i1.Fake implements _i2.GetMovieDetail {}

class _FakeGetMovieRecommendations_1 extends _i1.Fake
    implements _i3.GetMovieRecommendations {}

class _FakeGetMovieWatchListStatus_2 extends _i1.Fake
    implements _i4.GetMovieWatchListStatus {}

class _FakeSaveMovieWatchlist_3 extends _i1.Fake
    implements _i5.SaveMovieWatchlist {}

class _FakeRemoveMovieWatchlist_4 extends _i1.Fake
    implements _i6.RemoveMovieWatchlist {}

class _FakeMovieDetailState_5 extends _i1.Fake implements _i7.MovieDetailState {
}

/// A class which mocks [MovieDetailCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailCubit extends _i1.Mock implements _i7.MovieDetailCubit {
  MockMovieDetailCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetMovieDetail get getMovieDetail =>
      (super.noSuchMethod(Invocation.getter(#getMovieDetail),
          returnValue: _FakeGetMovieDetail_0()) as _i2.GetMovieDetail);
  @override
  _i3.GetMovieRecommendations get getMovieRecommendations =>
      (super.noSuchMethod(Invocation.getter(#getMovieRecommendations),
              returnValue: _FakeGetMovieRecommendations_1())
          as _i3.GetMovieRecommendations);
  @override
  _i4.GetMovieWatchListStatus get getMovieWatchListStatus =>
      (super.noSuchMethod(Invocation.getter(#getMovieWatchListStatus),
              returnValue: _FakeGetMovieWatchListStatus_2())
          as _i4.GetMovieWatchListStatus);
  @override
  _i5.SaveMovieWatchlist get saveMovieWatchlist =>
      (super.noSuchMethod(Invocation.getter(#saveMovieWatchlist),
          returnValue: _FakeSaveMovieWatchlist_3()) as _i5.SaveMovieWatchlist);
  @override
  _i6.RemoveMovieWatchlist get removeMovieWatchlist => (super.noSuchMethod(
      Invocation.getter(#removeMovieWatchlist),
      returnValue: _FakeRemoveMovieWatchlist_4()) as _i6.RemoveMovieWatchlist);
  @override
  _i7.MovieDetailState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeMovieDetailState_5()) as _i7.MovieDetailState);
  @override
  _i8.Stream<_i7.MovieDetailState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i7.MovieDetailState>.empty())
          as _i8.Stream<_i7.MovieDetailState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i8.Future<void> fetchMovieDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#fetchMovieDetail, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> addWatchlist(_i9.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#addWatchlist, [movie]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> removeFromWatchlist(_i9.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#removeFromWatchlist, [movie]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> loadWatchlistStatus(int? id) =>
      (super.noSuchMethod(Invocation.method(#loadWatchlistStatus, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void emit(_i7.MovieDetailState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i10.Change<_i7.MovieDetailState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  String toString() => super.toString();
}
