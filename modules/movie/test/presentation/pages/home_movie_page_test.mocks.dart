// Mocks generated by Mockito 5.0.16 from annotations
// in movie/test/presentation/pages/home_movie_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie/domain/usecases/get_now_playing_movies.dart' as _i2;
import 'package:movie/domain/usecases/get_popular_movies.dart' as _i3;
import 'package:movie/domain/usecases/get_top_rated_movies.dart' as _i4;
import 'package:movie/presentation/cubit/list/movie_list_cubit.dart' as _i5;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetNowPlayingMovies_0 extends _i1.Fake
    implements _i2.GetNowPlayingMovies {}

class _FakeGetPopularMovies_1 extends _i1.Fake implements _i3.GetPopularMovies {
}

class _FakeGetTopRatedMovies_2 extends _i1.Fake
    implements _i4.GetTopRatedMovies {}

class _FakeMovieListState_3 extends _i1.Fake implements _i5.MovieListState {}

/// A class which mocks [MovieListCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieListCubit extends _i1.Mock implements _i5.MovieListCubit {
  MockMovieListCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetNowPlayingMovies get getNowPlayingMovies => (super.noSuchMethod(
      Invocation.getter(#getNowPlayingMovies),
      returnValue: _FakeGetNowPlayingMovies_0()) as _i2.GetNowPlayingMovies);
  @override
  _i3.GetPopularMovies get getPopularMovies =>
      (super.noSuchMethod(Invocation.getter(#getPopularMovies),
          returnValue: _FakeGetPopularMovies_1()) as _i3.GetPopularMovies);
  @override
  _i4.GetTopRatedMovies get getTopRatedMovies =>
      (super.noSuchMethod(Invocation.getter(#getTopRatedMovies),
          returnValue: _FakeGetTopRatedMovies_2()) as _i4.GetTopRatedMovies);
  @override
  _i5.MovieListState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeMovieListState_3()) as _i5.MovieListState);
  @override
  _i6.Stream<_i5.MovieListState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i5.MovieListState>.empty())
          as _i6.Stream<_i5.MovieListState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i6.Future<void> fetchNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#fetchNowPlayingMovies, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> fetchPopularMovies() =>
      (super.noSuchMethod(Invocation.method(#fetchPopularMovies, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> fetchTopRatedMovies() =>
      (super.noSuchMethod(Invocation.method(#fetchTopRatedMovies, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  void emit(_i5.MovieListState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i7.Change<_i5.MovieListState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  String toString() => super.toString();
}
